/** Declaration file generated by dts-gen */

export class ADB {
    constructor(...args: any[]);

    adbExec(cmd: any, opts: any): any;

    adbExecEmu(cmd: any): void;

    androidCoverage(instrumentClass: any, waitPkg: any, waitActivity: any): any;

    availableIMEs(): any;

    back(): void;

    broadcast(intent: any): void;

    broadcastAirplaneMode(on: any): void;

    broadcastProcessEnd(intent: any, processName: any): void;

    bugreport(timeout: any): any;

    checkApkCert(appPath: any, pkg: any): any;

    checkApkKeystoreMatch(keytool: any, md5re: any, keystoreHash: any, pkg: any, apk: any): any;

    checkAvdExist(avdName: any): void;

    checkCustomApkCert(appPath: any, pkg: any): any;

    clear(pkg: any): any;

    clearTextField(length: any): void;

    compileManifest(manifest: any, manifestPackage: any, targetPackage: any): void;

    createSubProcess(args: any): any;

    defaultIME(): any;

    disableIME(imeId: any): void;

    enableIME(imeId: any): void;

    enabledIMEs(): any;

    endAndroidCoverage(): void;

    ensureCurrentLocale(language: any, country: any, script: any): any;

    execBundletool(args: any, errorMsg: any): any;

    executeApksigner(args: any): any;

    extractBaseApk(apks: any): any;

    extractLanguageApk(apks: any, language: any): any;

    extractStringsFromApk(appPath: any, language: any, out: any): any;

    fileExists(remotePath: any): any;

    fileSize(remotePath: any): any;

    fingerprint(fingerprintId: any): void;

    forceStop(pkg: any): any;

    forwardAbstractPort(systemPort: any, devicePort: any): void;

    forwardPort(systemPort: any, devicePort: any): void;

    getAdbPath(): any;

    getAdbServerPort(): any;

    getAdbVersion(...args: any[]): any;

    getAdbWithCorrectAdbPath(): any;

    getApiLevel(): any;

    getApkInfo(appPath: any): any;

    getApplicationInstallState(appPath: any, pkg: any): any;

    getBinaryFromPath(binaryName: any): any;

    getBinaryFromSdkRoot(...args: any[]): any;

    getBinaryNameForOS(...args: any[]): any;

    getCommandForOS(...args: any[]): any;

    getConnectedDevices(): any;

    getConnectedEmulators(): any;

    getDeniedPermissions(pkg: any, cmdOutput: any): any;

    getDeviceCountry(): any;

    getDeviceLanguage(): any;

    getDeviceLocale(): any;

    getDeviceProductCountry(): any;

    getDeviceProductLanguage(): any;

    getDeviceProductLocale(): any;

    getDeviceProperty(property: any): any;

    getDeviceSpec(specLocation: any): any;

    getDeviceSysCountry(): any;

    getDeviceSysLanguage(): any;

    getDeviceSysLocale(): any;

    getDevicesWithRetry(timeoutMs: any): any;

    getEmulatorPort(): any;

    getFocusedPackageAndActivity(): any;

    getForwardList(): any;

    getGeoLocation(): any;

    getGrantedPermissions(pkg: any, cmdOutput: any): any;

    getKeystoreMd5(keytool: any, md5re: any): any;

    getLocationProviders(): any;

    getLogcatLogs(): any;

    getManufacturer(): any;

    getModel(): any;

    getPIDsByName(name: any): any;

    getPackageInfo(pkg: any): any;

    getPlatformVersion(): any;

    getPortFromEmulatorString(emStr: any): any;

    getReqPermissions(pkg: any, cmdOutput: any): any;

    getRunningAVD(avdName: any): any;

    getRunningAVDWithRetry(avdName: any, timeoutMs: any): any;

    getScreenDensity(): any;

    getScreenOrientation(): any;

    getScreenSize(): any;

    getSdkBinaryPath(...args: any[]): any;

    getSetting(namespace: any, setting: any): any;

    goToHome(): void;

    grantAllPermissions(pkg: any, apk: any): void;

    grantPermission(pkg: any, permission: any): void;

    grantPermissions(pkg: any, permissions: any): void;

    gsmCall(phoneNumber: any, action: any): void;

    gsmSignal(strength: any): void;

    gsmVoice(state: any): void;

    hasInternetPermissionFromManifest(appPath: any): any;

    initAapt(): void;

    initBundletool(): void;

    initJars(...args: any[]): void;

    initZipAlign(): void;

    inputText(text: any): void;

    insertManifest(manifest: any, srcApk: any, dstApk: any): void;

    install(appPath: any, options?: any): any;

    installApks(apks: any, options: any): void;

    installFromDevicePath(apkPathOnDevice: any, opts: any): void;

    installMitmCertificate(cert: any): void;

    installOrUpgrade(appPath: any, pkg: any, options: any): void;

    instrument(pkg: any, activity: any, instrumentWith: any): void;

    isAirplaneModeOn(): any;

    isAnimationOn(): any;

    isAppInstalled(pkg: any): any;

    isDataOn(): any;

    isDeviceConnected(): any;

    isEmulatorConnected(): any;

    isMitmCertificateInstalled(cert: any): any;

    isRoot(): any;

    isScreenLocked(): any;

    isSoftKeyboardPresent(): any;

    isValidClass(classString: any): any;

    isWifiOn(): any;

    keyevent(keycode: any): void;

    killAllEmulators(): void;

    killEmulator(avdName: any, timeout: any): any;

    killPackage(pkg: any): any;

    killProcessByPID(pid: any): any;

    killProcessesByName(name: any): void;

    killServer(): void;

    launchAVD(avdName: any, avdArgs: any, language: any, country: any, avdLaunchTimeout: any, avdReadyTimeout: any, retryTimes: any): any;

    lock(): void;

    ls(remotePath: any, opts: any): any;

    mkdir(remotePath: any): any;

    networkSpeed(speed: any): void;

    packageAndLaunchActivityFromManifest(appPath: any): any;

    performEditorAction(action: any): void;

    ping(): any;

    powerAC(state: any): void;

    powerCapacity(percent: any): void;

    powerOFF(): void;

    printManifestFromApk(appPath: any, logLevel: any): void;

    processExists(processName: any): any;

    processFromManifest(localApk: any): any;

    pull(remotePath: any, localPath: any): void;

    pullApk(pkg: any, tmpDir: any): any;

    push(localPath: any, remotePath: any, opts: any): void;

    reboot(retries: any): void;

    removeLogcatListener(listener: any): void;

    removePortForward(systemPort: any): void;

    resetTelnetAuthToken(...args: any[]): any;

    restart(): void;

    restartAdb(): void;

    revokePermission(pkg: any, permission: any): void;

    rimraf(path: any): void;

    root(): any;

    rotate(): void;

    screenrecord(destination: any, options: any): any;

    sendSMS(phoneNumber: any, message: any): void;

    sendTelnetCommand(command: any): any;

    setAirplaneMode(on: any): void;

    setAnimationState(on: any): void;

    setDataState(on: any, isEmulator: any): void;

    setDefaultHiddenApiPolicy(): void;

    setDevice(deviceObj: any): void;

    setDeviceCountry(country: any): void;

    setDeviceId(deviceId: any): void;

    setDeviceLanguage(language: any): void;

    setDeviceLanguageCountry(language: any, country: any, script: any): void;

    setDeviceLocale(locale: any): void;

    setDeviceProperty(prop: any, val: any): void;

    setDeviceSysCountry(country: any): any;

    setDeviceSysLanguage(language: any): any;

    setDeviceSysLocale(locale: any): any;

    setDeviceSysLocaleViaSettingApp(language: any, country: any, script: any): void;

    setEmulatorPort(emPort: any): void;

    setGeoLocation(location: any, isEmulator: any): any;

    setHiddenApiPolicy(value: any): void;

    setHttpProxy(proxyHost: any, proxyPort: any): void;

    setIME(imeId: any): void;

    setLogcatListener(listener: any): void;

    setSetting(namespace: any, setting: any, value: any): any;

    setWifiAndData({
  wifi,
  data
}: any, isEmulator: any): void;

    setWifiState(on: any, isEmulator: any): void;

    shell(cmd: any, opts: any): any;

    sign(appPath: any): void;

    signWithCustomCert(apk: any): void;

    signWithDefaultCert(apk: any): void;

    startApp(startAppOptions: any): any;

    startLogcat(): void;

    startUri(uri: any, pkg: any): void;

    stopAndClear(pkg: any): void;

    stopLogcat(): void;

    targetSdkVersionFromManifest(appPath: any): any;

    targetSdkVersionUsingPKG(pkg: any, cmdOutput: any): any;

    toggleGPSLocationProvider(enabled: any): void;

    uninstallApk(pkg: any, options: any): any;

    unroot(): any;

    verifyEmulatorConnected(): void;

    waitForActivity(pkg: any, act: any, waitMs: any): void;

    waitForActivityOrNot(pkg: any, activity: any, waitForStop: any, waitMs: any): void;

    waitForDevice(appDeviceReadyTimeout: any): void;

    waitForEmulatorReady(timeoutMs: any): any;

    waitForNotActivity(pkg: any, act: any, waitMs: any): void;

    zipAlignApk(apk: any): any;

    static createADB(opts?: any): any;

}

export const DEFAULT_ADB_PORT: number;

export namespace ADB {
    namespace prototype {
        const APP_INSTALL_STATE: {
            NEWER_VERSION_INSTALLED: string;
            NOT_INSTALLED: string;
            OLDER_VERSION_INSTALLED: string;
            SAME_VERSION_INSTALLED: string;
            UNKNOWN: string;
        };

        const GSM_CALL_ACTIONS: {
            GSM_ACCEPT: string;
            GSM_CALL: string;
            GSM_CANCEL: string;
            GSM_HOLD: string;
        };

        const GSM_SIGNAL_STRENGTHS: number[];

        const GSM_VOICE_STATES: {
            GSM_VOICE_DENIED: string;
            GSM_VOICE_HOME: string;
            GSM_VOICE_OFF: string;
            GSM_VOICE_ON: string;
            GSM_VOICE_ROAMING: string;
            GSM_VOICE_SEARCHING: string;
            GSM_VOICE_UNREGISTERED: string;
        };

        const NETWORK_SPEED: {
            EDGE: string;
            EVDO: string;
            FULL: string;
            GPRS: string;
            GSM: string;
            HSDPA: string;
            LTE: string;
            SCSD: string;
            UMTS: string;
        };

        const POWER_AC_STATES: {
            POWER_AC_OFF: string;
            POWER_AC_ON: string;
        };

        function adbExec(cmd: any, opts: any): any;

        function adbExecEmu(cmd: any): void;

        function androidCoverage(instrumentClass: any, waitPkg: any, waitActivity: any): any;

        function availableIMEs(): any;

        function back(): void;

        function broadcast(intent: any): void;

        function broadcastAirplaneMode(on: any): void;

        function broadcastProcessEnd(intent: any, processName: any): void;

        function bugreport(timeout: any): any;

        function checkApkCert(appPath: any, pkg: any): any;

        function checkApkKeystoreMatch(keytool: any, md5re: any, keystoreHash: any, pkg: any, apk: any): any;

        function checkAvdExist(avdName: any): void;

        function checkCustomApkCert(appPath: any, pkg: any): any;

        function clear(pkg: any): any;

        function clearTextField(length: any): void;

        function compileManifest(manifest: any, manifestPackage: any, targetPackage: any): void;

        function createSubProcess(args: any): any;

        function defaultIME(): any;

        function disableIME(imeId: any): void;

        function enableIME(imeId: any): void;

        function enabledIMEs(): any;

        function endAndroidCoverage(): void;

        function ensureCurrentLocale(language: any, country: any, script: any): any;

        function execBundletool(args: any, errorMsg: any): any;

        function executeApksigner(args: any): any;

        function extractBaseApk(apks: any): any;

        function extractLanguageApk(apks: any, language: any): any;

        function extractStringsFromApk(appPath: any, language: any, out: any): any;

        function fileExists(remotePath: any): any;

        function fileSize(remotePath: any): any;

        function fingerprint(fingerprintId: any): void;

        function forceStop(pkg: any): any;

        function forwardAbstractPort(systemPort: any, devicePort: any): void;

        function forwardPort(systemPort: any, devicePort: any): void;

        function getAdbPath(): any;

        function getAdbServerPort(): any;

        function getAdbVersion(...args: any[]): any;

        function getAdbWithCorrectAdbPath(): any;

        function getApiLevel(): any;

        function getApkInfo(appPath: any): any;

        function getApplicationInstallState(appPath: any, pkg: any): any;

        function getBinaryFromPath(binaryName: any): any;

        function getBinaryFromSdkRoot(...args: any[]): any;

        function getBinaryNameForOS(...args: any[]): any;

        function getCommandForOS(...args: any[]): any;

        function getConnectedDevices(): any;

        function getConnectedEmulators(): any;

        function getDeniedPermissions(pkg: any, cmdOutput: any): any;

        function getDeviceCountry(): any;

        function getDeviceLanguage(): any;

        function getDeviceLocale(): any;

        function getDeviceProductCountry(): any;

        function getDeviceProductLanguage(): any;

        function getDeviceProductLocale(): any;

        function getDeviceProperty(property: any): any;

        function getDeviceSpec(specLocation: any): any;

        function getDeviceSysCountry(): any;

        function getDeviceSysLanguage(): any;

        function getDeviceSysLocale(): any;

        function getDevicesWithRetry(timeoutMs: any): any;

        function getEmulatorPort(): any;

        function getFocusedPackageAndActivity(): any;

        function getForwardList(): any;

        function getGeoLocation(): any;

        function getGrantedPermissions(pkg: any, cmdOutput: any): any;

        function getKeystoreMd5(keytool: any, md5re: any): any;

        function getLocationProviders(): any;

        function getLogcatLogs(): any;

        function getManufacturer(): any;

        function getModel(): any;

        function getPIDsByName(name: any): any;

        function getPackageInfo(pkg: any): any;

        function getPlatformVersion(): any;

        function getPortFromEmulatorString(emStr: any): any;

        function getReqPermissions(pkg: any, cmdOutput: any): any;

        function getRunningAVD(avdName: any): any;

        function getRunningAVDWithRetry(avdName: any, timeoutMs: any): any;

        function getScreenDensity(): any;

        function getScreenOrientation(): any;

        function getScreenSize(): any;

        function getSdkBinaryPath(...args: any[]): any;

        function getSetting(namespace: any, setting: any): any;

        function goToHome(): void;

        function grantAllPermissions(pkg: any, apk: any): void;

        function grantPermission(pkg: any, permission: any): void;

        function grantPermissions(pkg: any, permissions: any): void;

        function gsmCall(phoneNumber: any, action: any): void;

        function gsmSignal(strength: any): void;

        function gsmVoice(state: any): void;

        function hasInternetPermissionFromManifest(appPath: any): any;

        function initAapt(): void;

        function initBundletool(): void;

        function initJars(...args: any[]): void;

        function initZipAlign(): void;

        function inputText(text: any): void;

        function insertManifest(manifest: any, srcApk: any, dstApk: any): void;

        function install(appPath: any, options: any): any;

        function installApks(apks: any, options: any): void;

        function installFromDevicePath(apkPathOnDevice: any, opts: any): void;

        function installMitmCertificate(cert: any): void;

        function installOrUpgrade(appPath: any, pkg: any, options: any): void;

        function instrument(pkg: any, activity: any, instrumentWith: any): void;

        function isAirplaneModeOn(): any;

        function isAnimationOn(): any;

        function isAppInstalled(pkg: any): any;

        function isDataOn(): any;

        function isDeviceConnected(): any;

        function isEmulatorConnected(): any;

        function isMitmCertificateInstalled(cert: any): any;

        function isRoot(): any;

        function isScreenLocked(): any;

        function isSoftKeyboardPresent(): any;

        function isValidClass(classString: any): any;

        function isWifiOn(): any;

        function keyevent(keycode: any): void;

        function killAllEmulators(): void;

        function killEmulator(avdName: any, timeout: any): any;

        function killPackage(pkg: any): any;

        function killProcessByPID(pid: any): any;

        function killProcessesByName(name: any): void;

        function killServer(): void;

        function launchAVD(avdName: any, avdArgs: any, language: any, country: any, avdLaunchTimeout: any, avdReadyTimeout: any, retryTimes: any): any;

        function lock(): void;

        function ls(remotePath: any, opts: any): any;

        function mkdir(remotePath: any): any;

        function networkSpeed(speed: any): void;

        function packageAndLaunchActivityFromManifest(appPath: any): any;

        function performEditorAction(action: any): void;

        function ping(): any;

        function powerAC(state: any): void;

        function powerCapacity(percent: any): void;

        function powerOFF(): void;

        function printManifestFromApk(appPath: any, logLevel: any): void;

        function processExists(processName: any): any;

        function processFromManifest(localApk: any): any;

        function pull(remotePath: any, localPath: any): void;

        function pullApk(pkg: any, tmpDir: any): any;

        function push(localPath: any, remotePath: any, opts: any): void;

        function reboot(retries: any): void;

        function removeLogcatListener(listener: any): void;

        function removePortForward(systemPort: any): void;

        function resetTelnetAuthToken(...args: any[]): any;

        function restart(): void;

        function restartAdb(): void;

        function revokePermission(pkg: any, permission: any): void;

        function rimraf(path: any): void;

        function root(): any;

        function rotate(): void;

        function screenrecord(destination: any, options: any): any;

        function sendSMS(phoneNumber: any, message: any): void;

        function sendTelnetCommand(command: any): any;

        function setAirplaneMode(on: any): void;

        function setAnimationState(on: any): void;

        function setDataState(on: any, isEmulator: any): void;

        function setDefaultHiddenApiPolicy(): void;

        function setDevice(deviceObj: any): void;

        function setDeviceCountry(country: any): void;

        function setDeviceId(deviceId: any): void;

        function setDeviceLanguage(language: any): void;

        function setDeviceLanguageCountry(language: any, country: any, script: any): void;

        function setDeviceLocale(locale: any): void;

        function setDeviceProperty(prop: any, val: any): void;

        function setDeviceSysCountry(country: any): any;

        function setDeviceSysLanguage(language: any): any;

        function setDeviceSysLocale(locale: any): any;

        function setDeviceSysLocaleViaSettingApp(language: any, country: any, script: any): void;

        function setEmulatorPort(emPort: any): void;

        function setGeoLocation(location: any, isEmulator: any): any;

        function setHiddenApiPolicy(value: any): void;

        function setHttpProxy(proxyHost: any, proxyPort: any): void;

        function setIME(imeId: any): void;

        function setLogcatListener(listener: any): void;

        function setSetting(namespace: any, setting: any, value: any): any;

        function setWifiAndData({
  wifi,
  data
}: any, isEmulator: any): void;

        function setWifiState(on: any, isEmulator: any): void;

        function shell(cmd: any, opts: any): any;

        function sign(appPath: any): void;

        function signWithCustomCert(apk: any): void;

        function signWithDefaultCert(apk: any): void;

        function startApp(startAppOptions: any): any;

        function startLogcat(): void;

        function startUri(uri: any, pkg: any): void;

        function stopAndClear(pkg: any): void;

        function stopLogcat(): void;

        function targetSdkVersionFromManifest(appPath: any): any;

        function targetSdkVersionUsingPKG(pkg: any, cmdOutput: any): any;

        function toggleGPSLocationProvider(enabled: any): void;

        function uninstallApk(pkg: any, options: any): any;

        function unroot(): any;

        function verifyEmulatorConnected(): void;

        function waitForActivity(pkg: any, act: any, waitMs: any): void;

        function waitForActivityOrNot(pkg: any, activity: any, waitForStop: any, waitMs: any): void;

        function waitForDevice(appDeviceReadyTimeout: any): void;

        function waitForEmulatorReady(timeoutMs: any): any;

        function waitForNotActivity(pkg: any, act: any, waitMs: any): void;

        function zipAlignApk(apk: any): any;

        namespace createSubProcess {
            const prototype: {
            };

        }

        namespace getAdbPath {
            const prototype: {
            };

        }

        namespace getAdbServerPort {
            const prototype: {
            };

        }

        namespace getAdbVersion {
            const prototype: {
            };

            namespace cache {
                // Too-deep object hierarchy from appium_adb.ADB.prototype.getAdbVersion.cache
                const clear: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getAdbVersion.cache
                const delete: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getAdbVersion.cache
                const get: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getAdbVersion.cache
                const has: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getAdbVersion.cache
                const set: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getAdbVersion.cache
                const size: any;

            }

        }

        namespace getBinaryFromSdkRoot {
            const prototype: {
            };

            namespace cache {
                // Too-deep object hierarchy from appium_adb.ADB.prototype.getBinaryFromSdkRoot.cache
                const clear: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getBinaryFromSdkRoot.cache
                const delete: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getBinaryFromSdkRoot.cache
                const get: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getBinaryFromSdkRoot.cache
                const has: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getBinaryFromSdkRoot.cache
                const set: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getBinaryFromSdkRoot.cache
                const size: any;

            }

        }

        namespace getBinaryNameForOS {
            const prototype: {
            };

            namespace cache {
                // Too-deep object hierarchy from appium_adb.ADB.prototype.getBinaryNameForOS.cache
                const clear: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getBinaryNameForOS.cache
                const delete: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getBinaryNameForOS.cache
                const get: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getBinaryNameForOS.cache
                const has: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getBinaryNameForOS.cache
                const set: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getBinaryNameForOS.cache
                const size: any;

            }

        }

        namespace getCommandForOS {
            const prototype: {
            };

            namespace cache {
                // Too-deep object hierarchy from appium_adb.ADB.prototype.getCommandForOS.cache
                const clear: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getCommandForOS.cache
                const delete: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getCommandForOS.cache
                const get: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getCommandForOS.cache
                const has: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getCommandForOS.cache
                const set: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getCommandForOS.cache
                const size: any;

            }

        }

        namespace getLogcatLogs {
            const prototype: {
            };

        }

        namespace getPortFromEmulatorString {
            const prototype: {
            };

        }

        namespace getSdkBinaryPath {
            const prototype: {
            };

            namespace cache {
                // Too-deep object hierarchy from appium_adb.ADB.prototype.getSdkBinaryPath.cache
                const clear: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getSdkBinaryPath.cache
                const delete: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getSdkBinaryPath.cache
                const get: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getSdkBinaryPath.cache
                const has: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getSdkBinaryPath.cache
                const set: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.getSdkBinaryPath.cache
                const size: any;

            }

        }

        namespace isValidClass {
            const prototype: {
            };

        }

        namespace removeLogcatListener {
            const prototype: {
            };

        }

        namespace resetTelnetAuthToken {
            const prototype: {
            };

            namespace cache {
                // Too-deep object hierarchy from appium_adb.ADB.prototype.resetTelnetAuthToken.cache
                const clear: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.resetTelnetAuthToken.cache
                const delete: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.resetTelnetAuthToken.cache
                const get: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.resetTelnetAuthToken.cache
                const has: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.resetTelnetAuthToken.cache
                const set: any;

                // Too-deep object hierarchy from appium_adb.ADB.prototype.resetTelnetAuthToken.cache
                const size: any;

            }

        }

        namespace screenrecord {
            const prototype: {
            };

        }

        namespace setDevice {
            const prototype: {
            };

        }

        namespace setDeviceId {
            const prototype: {
            };

        }

        namespace setEmulatorPort {
            const prototype: {
            };

        }

        namespace setLogcatListener {
            const prototype: {
            };

        }

    }

}

